(define-struct STUDENT (name dept gpa))
; A  STUDENT is a structure: 
; (make-STUDENT String String Number)
; interpretation a contact's name, department and gpa
; name is a String and repr. the name of a student

;constructor
(define stu1 (make-STUDENT "ali" "CMPE" 3.40))
(define stu2 (make-STUDENT "veli" "EEEN" 2.50))
(define stu3 (make-STUDENT "ayse" "EEEN" 3.60))

;selector:
(STUDENT-name stu1) ;string "ali"
(STUDENT-dept stu2) ;string "EEEN"
(STUDENT-gpa stu1) ;number 3.40
(string=? (STUDENT-name stu1) "ali") ;#true

;predicate:
(STUDENT? stu1) ;#true
(STUDENT? stu2) ;#true
(STUDENT? 42)   ;#false
(STUDENT? (STUDENT-gpa stu1)) ;#false

;findNameGpa>3: STUDENT ---> string/false
;purpose: to find the name of given student whose gpas is greater than 3.00
(check-expect (findNameGpa>3 stu1) "ali")
(check-expect (findNameGpa>3 stu2) #false)
(check-expect (findNameGpa>3 stu3) "ayse")

;template
; (define (findNameGpa>3 astd)
;   (cond
;   ((> (STUDENT-gpa 3.0)) ....(STUDENT-name astd) ....(STUDENT-dept astd)...(STUDENT-gpa astd))))


;
(define (findNameGpa>3 astd)
  ;(if (> (STUDENT-gpa astd) 3.0)(STUDENT-name astd) #false))
  (cond
  ( (> (STUDENT-gpa astd) 3.0) (STUDENT-name astd))
  (else  #false)))

(findNameGpa>3 stu1)


;*********************************

;findNameGpa>3dept=cmpe: STUDENT ---> string/false
;purpose: to find the name of given student whose gpas is greater than 3.00
;and dept is cmpe

(check-expect (findNameGpa>3dept=cmpe stu1) "ali")
(check-expect (findNameGpa>3dept=cmpe stu2) #false)
(check-expect (findNameGpa>3dept=cmpe stu3) #false)

;template
; (define (findNameGpa>3dept=cmpe astd)
;   (cond
;   ((> (STUDENT-gpa 3.0)) ... (string=? (STUDENT-dept astd) "CMPE"))....
;   (STUDENT-name astd) ....(STUDENT-dept astd)...(STUDENT-gpa astd))))


(define (findNameGpa>3dept=cmpe astd)
  (cond
  ((and (> (STUDENT-gpa astd) 3.0) (string=? (STUDENT-dept astd) "CMPE"))(STUDENT-name astd))
  (else #false)))
  

(findNameGpa>3dept=cmpe stu1)

;*******************************************************************

;Purpose: to find the name of given student whose gpas is greater than and equal given gps and given dept
;Contract: findNameGpa>anydept=any: STUDENT adept agpa---> string/false
;Examples:
(check-expect (findNameGpa>anydept=any stu1 "CMPE" 3.0) "ali")
(check-expect (findNameGpa>anydept=any stu2 "EEEN" 2.5) "veli")
(check-expect (findNameGpa>anydept=any (make-STUDENT "can" "EEEN" 3.9) "BIOE" 2.0) #false)

;Template:
; 
; (define (findNameGpa>anydept=any astudent adept agpa)
; (cond
; ((and (string=? (STUDENT-dept astudent) adept)(>= (STUDENT-gpa astudent) agpa) ...)
; (else ...)))


;Function:

(define (findNameGpa>anydept=any astudent adept agpa)
(cond
((and (string=? (STUDENT-dept astudent) adept)(>= (STUDENT-gpa astudent) agpa)) (STUDENT-name astudent))
(else #false)))

;Test:
(findNameGpa>anydept=any stu3 "EEEN" 1.75)


;***********************************************************************
;Constructors:
(define posn1 (make-posn 3 4))
(define posn2 (make-posn 0 7))
(define posn3 (make-posn 6 8))

;Selectors:
(posn-x posn1) ; 3
(posn-y (make-posn 10 10)) ;10
(posn-y posn2) ;8
(> (posn-x posn1) (posn-y posn1)) ;#false


;Predicate:
(posn? posn1) ;#true
(posn? 4) ;#false


;Contract: distToOrig: Posn ---> number
;Purpose: to find the distance to origin
(check-expect (distToOrig pos1) 5)
(check-expect (distToOrig pos2) 7)
(check-expect (distToOrig pos3) 10)

; (define (distToOrig aposn)
;   (.... (posn-x aposn) .... (posn-y aposn)...))


(define (distToOrig aposn)
  (sqrt (+ (* (posn-x aposn)(posn-x aposn))
     (* (posn-y aposn)(posn-y aposn)))))


(distToOrig posn1)
(distToOrig posn2)
(distToOrig posn3)


;*****************************************************************


;newpos: posn number number ---> posn
;Purpose: new position with given top and left
;Example:
(check-expect (newPos (make-posn 10 20) 10 10) (make-posn 20 30))
;Template:
; (define (newPos aposn)
;   (.... (posn-x aposn) .... (posn-y aposn)...))


;Function:
(define (newPos apos num1 num2)
  (make-posn (+ (posn-x apos) num1) (+ num2 (posn-y apos))))
;Test:
(newPos (make-posn 10 20) 10 10)


;*****************************************************************

(define MTS (empty-scene 100 100))
(define DOT (circle 3 "solid" "red"))

; Purpose: A Posn represents the state of the world. Function adds a red spot to MTS at p
; Contract: scene+dot: Posn -> Image
;Examples:
(check-expect (scene+dot (make-posn 10 20))(place-image DOT 10 20 MTS))
(check-expect (scene+dot (make-posn 88 73))(place-image DOT 88 73 MTS))

; (define (scene+dot p)
;   (... (posn-x p) ... (posn-y p) ...))


(define (scene+dot p)
  (place-image DOT (posn-x p) (posn-y p) MTS))



; Purpose: increases the x-coordinate of p by 3
; Contract: x+: Posn -> Posn
;Example:
(check-expect (x+ (make-posn 10 0)) (make-posn 13 0))
(check-expect (x+ (make-posn 100 200)) (make-posn 103 200))
;Template:
; (define (x+ p)
;   (... (make-posn.....(posn-x p) ... (posn-y p) ...))

;Function:
(define (x+ p)
  (make-posn (+ (posn-x p) 3) (posn-y p)))



;Purpose: for mouse clicks "button-sown", (make-posn x y); otherwise p
;Contract: reset-dot: Posn Number Number MouseEvt -> Posn 
;Example:
(check-expect (reset-dot (make-posn 10 20) 29 31 "button-down") (make-posn 29 31))
(check-expect (reset-dot (make-posn 10 20) 29 31 "button-up")(make-posn 10 20))

;Template:
;     (define (reset-dot p x y me)
;       (cond
;         [(mouse=? "button-down" me) (... p ... x y ...)]
;         [else (... p ... x y ...)]))
; 


;Function:
(define (reset-dot p x y me)
  (cond
    [(mouse=? me "button-down") (make-posn x y)]
    [else p]))

; Posn (cw) -> Posn (cw) 
(define (main p0)
  (big-bang p0
    [on-tick x+]           ; cw (posn) ---> cw(posn)
    [on-mouse reset-dot]   ; cw (posn) x y me ---> cw (posn)
    [to-draw scene+dot]))  ; cw (posn) ---> image

(main posn1)
